{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","placeholder","name","onChange","ref","onClick","type","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","TodoList","setTodos","console","log","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b13eace.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n\r\n    const inputRef = useRef(null);\r\n\r\n    useEffect( () => {\r\n        inputRef.current.focus()\r\n    });\r\n\r\n    const handleChange = e => {\r\n        setInput(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000), //generates random number 10k or less\r\n            text: input\r\n        });\r\n\r\n        setInput('');\r\n    };\r\n\r\n    return (\r\n        <form className='todo-form' onSubmit={handleSubmit}>\r\n            {props.edit ? ( \r\n            <>\r\n                <input \r\n                    placeholder='Update your item'\r\n                    value={input} \r\n                    name='text' \r\n                    className='todo-input edit'\r\n                    onChange= {handleChange}\r\n                    ref={inputRef}\r\n                />\r\n                <button onClick={handleSubmit} className=\"todo-button edit\">Update</button>\r\n            </>\r\n            ) : (\r\n            <>\r\n            <input \r\n                type=\"text\" \r\n                placeholder=\"Add a todo\" \r\n                value={input} \r\n                name=\"text\" \r\n                className=\"todo-input\"\r\n                onChange= {handleChange}\r\n                ref={inputRef}\r\n             />\r\n            <button onClick={handleSubmit} className=\"todo-button\">Add todo</button>\r\n            </>\r\n            )}\r\n            \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, {useState} from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport {RiCloseCircleLine} from 'react-icons/ri';\r\nimport {TiEdit} from 'react-icons/ti';\r\n\r\nconst Todo = ({todos, completeTodo, removeTodo, updateTodo}) => {\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: ''\r\n    });\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value);\r\n        setEdit({\r\n            id:null,\r\n            value:''\r\n        })\r\n    }\r\n\r\n    if(edit.id) {\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n    }\r\n\r\n    return todos.map((todo, index) => (\r\n        <div className={todo.isComplete ? 'todo-row complete' : 'todo-row'} key={index}>\r\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                {todo.text}\r\n            </div>\r\n            <div className=\"icons\">\r\n                <RiCloseCircleLine onClick={() => removeTodo(todo.id)} className='delete-icon' />\r\n                <TiEdit onClick={() => setEdit({id: todo.id, value: todo.text})} className='edit-icon'/>\r\n            </div>        \r\n        </div>\r\n    ));\r\n}\r\n\r\nexport default Todo;\r\n","import React, {useState} from 'react';\r\nimport Todo from './Todo';\r\nimport TodoForm from './TodoForm';\r\n\r\nfunction TodoList() {\r\n    const [todos, setTodos] = useState([]);\r\n    console.log(todos);\r\n\r\n    const addTodo = todo => {\r\n        //stack overflow code\r\n        if(!todo.text || /^\\s*$/.test(todo.text)) {\r\n            return;\r\n        }\r\n\r\n        const newTodos = [todo, ...todos];\r\n\r\n        setTodos(newTodos);\r\n        // console.log(todo, ...todos); //this is logging every input with the new input\r\n    };\r\n\r\n    const updateTodo = (todoId, newValue) => {\r\n        if(!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n            return;\r\n        }\r\n\r\n        setTodos(prev => prev.map(item =>(item.id === todoId ? newValue : item)));\r\n    };\r\n\r\n    const removeTodo = id => {\r\n        const removeArr = [...todos].filter(todo => todo.id !== id)\r\n\r\n        setTodos(removeArr);\r\n    };\r\n    \r\n\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo => {\r\n            if(todo.id === id){\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;        \r\n        })\r\n        setTodos(updatedTodos);\r\n    };\r\n    \r\n    return (\r\n        <>\r\n            <h1>What's the plan for today?</h1>\r\n            <TodoForm onSubmit={addTodo}/>\r\n            <Todo todos={todos} completeTodo={completeTodo} removeTodo ={removeTodo} updateTodo={updateTodo}/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TodoList from './components/TodoList';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"todo-app\">\r\n      <TodoList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}